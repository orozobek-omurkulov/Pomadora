{"version":3,"sources":["components/SettingsModal/Settings.module.css","components/InfoModal/Info.module.css","components/SettingsBtn/SettingsBtn.module.css","components/Timer/Timer.module.css","audio/bell.flac","components/InfoBtn/InfoBtn.module.css","components/TimerDisplay/index.jsx","components/SettingsBtn/index.jsx","components/SettingsModal/index.jsx","components/InfoBtn/index.jsx","components/InfoModal/index.jsx","components/Timer/index.jsx","store/action.js","App.js","serviceWorker.js","store/reducers.js","index.js"],"names":["module","exports","TimeDisplay","props","circumference","normalizedRadius","Math","PI","strokeDashoffset","progress","className","width","viewBox","radius","stroke","fill","strokeWidth","r","cx","cy","strokeDasharray","style","children","SettingsBtn","onClick","onclick","css","btn","fontSize","Settings","title","active","onChange","backdrop","modal","content","InfoBtn","Info","Timer","state","useSelector","dispatch","useDispatch","useEffect","localStorage","setItem","JSON","stringify","useState","workTime","pomodoroInterval","setPomodoroInterval","shortBreak","shortBrake","setShortBrake","longBreak","longBrake","setLongBreak","pomodoroQuantity","pomodoros","setPomodoros","autoPlay","setAutoPlay","Audio","bellSound","bell","time","setTime","pomodoro","setPomodoro","restFlag","setRestFlag","buttonText","setButtonText","startStatus","setStartStatus","settings","setSettings","info","setInfo","temporary","setTemporary","setTimeout","play","interval","flag","pomodoroCount","Swal","fire","allowOutsideClick","onOpen","onClose","blueBg","allowEnterKey","confirmButtonColor","redBg","minutes","floor","seconds","onModal","onInfo","document","body","classList","remove","add","total","getProgress","test","Button","size","variant","console","log","TextField","id","type","fullWidth","value","e","target","FormControlLabel","control","Checkbox","checked","label","color","App","Boolean","window","location","hostname","match","local","parse","getItem","initialState","store","createStore","action","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a0f25ca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Settings_backdrop__2T_XR\",\"modal\":\"Settings_modal__3Uh2Z\",\"title\":\"Settings_title__1JkkM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Info_backdrop__2Bjow\",\"modal\":\"Info_modal__1maMh\",\"title\":\"Info_title__3EwQl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SettingsBtn_btn__29AUK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"test\":\"Timer_test__2Nybp\"};","module.exports = __webpack_public_path__ + \"static/media/bell.525320df.flac\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"InfoBtn_btn__2Rs3f\",\"icon\":\"InfoBtn_icon__1uHMx\"};","import React from 'react';\r\nimport './TimerDisplay.css';\r\n\r\nconst TimeDisplay = (props) => {\r\n    const radius = 150;\r\n    const stroke = 5;\r\n    const normalizedRadius = radius - stroke * 2;\r\n    const circumference = normalizedRadius * 2 * Math.PI;\r\n    const strokeDashoffset = circumference - (props.progress / 100) * circumference;\r\n\r\n    return (\r\n        <div className=\"TimeDisplay\">\r\n            <svg width=\"100%\" viewBox={`0 0 ${radius * 2} ${radius * 2}`}>\r\n                <circle\r\n                    stroke=\"#ddd\"\r\n                    fill=\"#fff\"\r\n                    strokeWidth={stroke}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n                <circle\r\n                    stroke=\"#D9534F\"\r\n                    fill=\"transparent\"\r\n                    strokeWidth={stroke}\r\n                    strokeDasharray={circumference + ' ' + circumference}\r\n                    style={{ strokeDashoffset }}\r\n                    r={normalizedRadius}\r\n                    cx={radius}\r\n                    cy={radius}\r\n                />\r\n            </svg>\r\n            <div>\r\n                {props.children}\r\n                <p>Pomodoro Technique</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TimeDisplay;\r\n","import React from 'react';\r\nimport css from './SettingsBtn.module.css';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst SettingsBtn = (props) => {\r\n    return (\r\n        <button onClick={props.onclick} className={css.btn}>\r\n            <SettingsIcon fontSize=\"large\"/>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default SettingsBtn;","import React from 'react';\r\nimport css from './Settings.module.css';\r\n\r\nfunction Settings({ title, active, children, onChange }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop} >\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\r\nimport css from './InfoBtn.module.css';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nconst InfoBtn = (props) => {\r\n    return (\r\n        <button onClick={props.onclick} className={css.btn}>\r\n            <InfoIcon fontSize=\"large\"/>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default InfoBtn;","import React from 'react';\r\nimport css from './Info.module.css';\r\n\r\nfunction Info({ title, active, children, onChange }) {\r\n  if (!active) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={css.backdrop} >\r\n      <div className={css.modal}>\r\n        {title && <h2 className={css.title}>{title}</h2>}\r\n        <div className={css.content}>{children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React, { useState, useEffect } from 'react'\r\nimport TimerDisplay from '../TimerDisplay'\r\nimport SettingsBtn from '../SettingsBtn'\r\nimport Settings from '../SettingsModal'\r\nimport css from './Timer.module.css'\r\nimport bellSound from '../../audio/bell.flac'\r\nimport Swal from 'sweetalert2'\r\nimport InfoBtn from '../InfoBtn'\r\nimport Info from '../InfoModal'\r\nimport { Button, FormControlLabel, Checkbox } from '@material-ui/core'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { session } from '../../store/action'\r\n\r\nfunction Timer() {\r\n\r\n  const state = useSelector((state) => state)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('pomodorState', JSON.stringify(state))\r\n  }, [state])\r\n\r\n  // Here are time value hooks\r\n  const [pomodoroInterval, setPomodoroInterval] = useState(state.workTime)\r\n  const [shortBrake, setShortBrake] = useState(state.shortBreak)\r\n  const [longBrake, setLongBreak] = useState(state.longBreak)\r\n  const [pomodoros, setPomodoros] = useState(state.pomodoroQuantity)\r\n  const [autoPlay, setAutoPlay] = useState(true)\r\n\r\n  // Hooks for sounds\r\n  const [bell] = useState(new Audio(bellSound))\r\n\r\n  // Other hooks\r\n  const [time, setTime] = useState(pomodoroInterval * 60)\r\n  const [pomodoro, setPomodoro] = useState(1)\r\n  const [restFlag, setRestFlag] = useState(false)\r\n  const [buttonText, setButtonText] = useState('Pause')\r\n  const [startStatus, setStartStatus] = useState(false)\r\n\r\n  // Hooks for Modals\r\n  const [settings, setSettings] = useState(false)\r\n  const [info, setInfo] = useState(false)\r\n\r\n  // Here is a temporary value for progress bar\r\n  const [temporary, setTemporary] = useState(pomodoroInterval)\r\n\r\n  useEffect(() => {\r\n    if (startStatus) {\r\n      if (buttonText === 'Pause') {\r\n        if (time !== 0) {\r\n          setTimeout(() => {\r\n            setTime(time - 1)\r\n          }, 1000)\r\n        } else {\r\n          bell.play()\r\n          pomodoroCount()\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  const start = () => {\r\n    console.log('test')\r\n    setStartStatus(true)\r\n  }\r\n\r\n  const minutes = Math.floor(time / 60)\r\n  const seconds = time - minutes * 60\r\n\r\n  function pomodoroCount() {\r\n    let pomodoroCount = pomodoro\r\n    let interval\r\n    let flag\r\n    if (pomodoro < pomodoros && !restFlag) {\r\n      interval = shortBrake\r\n      flag = true\r\n      setTemporary(shortBrake)\r\n\r\n      autoPlay === true &&\r\n        Swal.fire({\r\n          title: 'Time to have a rest',\r\n          allowOutsideClick: false,\r\n          onOpen: () => {\r\n            setButtonText('Continue')\r\n          },\r\n          onClose: () => {\r\n            setButtonText('Pause')\r\n            blueBg()\r\n          },\r\n          allowEnterKey: true,\r\n          confirmButtonColor: 'red',\r\n        })\r\n    } else if (pomodoro < pomodoros && restFlag) {\r\n      pomodoroCount = pomodoro + 1\r\n      interval = pomodoroInterval\r\n      flag = false\r\n      setTemporary(pomodoroInterval)\r\n\r\n      autoPlay === true &&\r\n        Swal.fire({\r\n          title: 'Time to work',\r\n          allowOutsideClick: false,\r\n          onOpen: () => {\r\n            setButtonText('Continue')\r\n          },\r\n          onClose: () => {\r\n            setButtonText('Pause')\r\n            redBg()\r\n          },\r\n          allowEnterKey: true,\r\n          confirmButtonColor: 'blue',\r\n        })\r\n    } else if (pomodoro >= pomodoros) {\r\n      pomodoroCount = 1\r\n      interval = longBrake\r\n      flag = true\r\n      setTemporary(longBrake)\r\n      blueBg()\r\n\r\n      autoPlay === true &&\r\n        Swal.fire({\r\n          title: 'Time to have the longest break',\r\n          allowOutsideClick: false,\r\n          onOpen: () => {\r\n            setButtonText('Continue')\r\n          },\r\n          onClose: () => {\r\n            setButtonText('Pause')\r\n          },\r\n          allowEnterKey: true,\r\n          confirmButtonColor: 'red',\r\n        })\r\n    }\r\n    setPomodoro(pomodoroCount)\r\n    setTime(interval * 60)\r\n    setRestFlag(flag)\r\n  }\r\n\r\n  function pauseAndResume() {\r\n    let newText\r\n    if (buttonText === 'Pause') {\r\n      newText = 'Continue'\r\n    } else {\r\n      newText = 'Pause'\r\n    }\r\n    setButtonText(newText)\r\n  }\r\n\r\n  // Func for progress bar\r\n  const getProgress = () => {\r\n    const current = time\r\n    const total = temporary * 60\r\n    return ((total - current) / total) * 100\r\n  }\r\n\r\n  const onModal = () => {\r\n    return setSettings(true)\r\n  }\r\n\r\n  const onInfo = () => {\r\n    return setInfo(true)\r\n  }\r\n\r\n  const onCheckBox = () => {\r\n    return setAutoPlay(!autoPlay)\r\n  }\r\n\r\n  const reset = () => {\r\n    if (buttonText === 'Continue') {\r\n      setStartStatus(false)\r\n      setRestFlag(false)\r\n      setTime(temporary * 60)\r\n      setButtonText('Pause')\r\n    }\r\n  }\r\n\r\n  // Func for changing bg Color while a break\r\n  const blueBg = () => {\r\n    document.body.classList.remove('restout')\r\n    document.body.classList.add('workout')\r\n  }\r\n\r\n  const redBg = () => {\r\n    document.body.classList.remove('workout')\r\n    document.body.classList.add('restout')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <InfoBtn onclick={onInfo} />\r\n      <SettingsBtn onclick={onModal} />\r\n\r\n      <TimerDisplay time={pomodoroInterval} progress={getProgress()}>\r\n        <h2 className={css.test}>\r\n          {minutes < 10 ? `0${minutes}` : minutes} :{' '}\r\n          {seconds < 10 ? `0${seconds}` : seconds}\r\n        </h2>\r\n      </TimerDisplay>\r\n      <br />\r\n\r\n      {startStatus ? (\r\n        <div>\r\n          <Button\r\n            size='large'\r\n            variant='outlined'\r\n            onClick={pauseAndResume}\r\n          >\r\n            {buttonText}\r\n          </Button>\r\n          <Button\r\n            size='large'\r\n            title='Click <Pause> to reset'\r\n            onClick={reset}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <Button variant='outlined' onClick={start} size='large'>\r\n          Start\r\n        </Button>\r\n      )}\r\n\r\n      <Settings active={settings} onChange={onModal}>\r\n        <h3>Settings</h3>\r\n        <div>Pomodoro</div>\r\n        <TextField\r\n          id='standard-basic'\r\n          variant='outlined'\r\n          type='number'\r\n          fullWidth\r\n          value={pomodoroInterval}\r\n          onChange={(e) => {\r\n            setPomodoroInterval(e.target.value)\r\n            setTime(e.target.value * 60)\r\n            setTemporary(e.target.value)\r\n          }}\r\n        />\r\n\r\n        <div>Short Break</div>\r\n        <TextField\r\n          id='standard-basic'\r\n          variant='outlined'\r\n          fullWidth\r\n          value={shortBrake}\r\n          onChange={(e) => setShortBrake(e.target.value)}\r\n          type='number'\r\n        />\r\n\r\n        <div>Long Break</div>\r\n        <TextField\r\n          id='standard-basic'\r\n          variant='outlined'\r\n          fullWidth\r\n          value={longBrake}\r\n          onChange={(e) => setLongBreak(e.target.value)}\r\n          type='number'\r\n        />\r\n\r\n        <div>Pomodoro Count</div>\r\n        <TextField\r\n          id='standard-basic'\r\n          variant='outlined'\r\n          fullWidth\r\n          value={pomodoros}\r\n          onChange={(e) => {\r\n            setPomodoros(e.target.value)\r\n            console.log('count')\r\n          }}\r\n          type='number'\r\n        />\r\n\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={autoPlay}\r\n              onChange={onCheckBox}\r\n              value='checkedA'\r\n            />\r\n          }\r\n          label='Auto Play without push notifications'\r\n        />\r\n        <br />\r\n\r\n        <Button\r\n          variant='outlined'\r\n          size='large'\r\n          color='primary'\r\n          onClick={() => {\r\n            dispatch(\r\n              session({\r\n                pomodoroInterval,\r\n                longBrake,\r\n                shortBrake,\r\n                pomodoros,\r\n              }),\r\n            )\r\n            setSettings(false)\r\n          }}\r\n        >\r\n          All ok\r\n        </Button>\r\n      </Settings>\r\n\r\n      <Info active={info} onChange={onInfo}>\r\n        <h2>This app was implemented by Oroz Omurkulov</h2>\r\n        <br />\r\n        <br />\r\n        <Button\r\n          variant='outlined'\r\n          size='large'\r\n          onClick={() => {\r\n            setInfo(false)\r\n            setPomodoro(1)\r\n          }}\r\n        >\r\n          Close\r\n        </Button>\r\n      </Info>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Timer\r\n\r\n\r\n","export const SESSION = \"SESSION\";\r\n\r\nexport const session = () => ({\r\n  type: SESSION,\r\n});\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Timer from './components/Timer/index'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n       <Timer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { SESSION } from \"./action\";\r\n\r\nconst local = JSON.parse(localStorage.getItem(\"Pomodoro\"));\r\n\r\nconst initialState = {\r\n  workTime: 25,\r\n  shortBreak: 5,\r\n  longBreak: 10,\r\n  pomodoroQuantity: 4,\r\n};\r\n\r\nexport const rootReducer = (state = local ? local : initialState, action) => {\r\n  switch (action.type) {\r\n    case SESSION:\r\n      return {\r\n        ...state,\r\n        workTime: state.workTime,\r\n        shortBreak: state.shortBreak,\r\n        longBreak: state.longBreak,\r\n        pomodoroQuantity: state.pomodoroQuantity,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { rootReducer } from \"./store/reducers\";\r\nimport { createStore } from \"redux\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}